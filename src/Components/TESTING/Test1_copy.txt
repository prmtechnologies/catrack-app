import React, { Fragment } from "react";
import { Component } from "react";
import uuidv1 from "uuid/v1";

import Grid from "@material-ui/core/Grid";
import { Divider } from "@material-ui/core";
import Button from "@material-ui/core/Button";

import TextField from "@material-ui/core/TextField";
import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogContent from "@material-ui/core/DialogContent";
import DialogContentText from "@material-ui/core/DialogContentText";
import DialogTitle from "@material-ui/core/DialogTitle";

import { BreadCrump } from "./Test1Breadcrumb";

/**
 * headType: ["folder","file","item"]
 * itemType: ["title","desc","dish"]
 */
const menus = [
  { _id: "1", name: "Veg", type: "folder", parentId: "0" },
  { _id: "2", name: "Non Veg", type: "folder", parentId: "0" },
  { _id: "3", name: "Breakfast", type: "folder", parentId: "2" },
  { _id: "4", name: "Master sub file", type: "folder", parentId: "3" },
  { _id: "5", name: "Appams", type: "folder", parentId: "4" },
  {
    _id: "6",
    name: "Appams Non Veg",
    type: "file",
    parentId: "5",
    contents: [
      { text1: "APPAMS (RICE AND COCONUT HOPPERS)", text2: "", type: "title" },
      {
        text1:
          "A South- Indian speciality, Appams are essentially a fermented rice and coconut lace pancake (also referred to as hoppers) with a thicker spongey center. They are delicately sweet, light ‘n crispy along the edges and fluffy ‘n soft in the center. Perfect for mopping up traditional Kerela stews.",
        text2: "",
        type: "desc"
      },
      { text1: "Chili appams ", text2: "", type: "dish" },
      { text1: "Egg appams", text2: "", type: "dish" },
      { text1: "Oatmeal appams", text2: "", type: "dish" },
      { text1: "Soya appams", text2: "", type: "dish" },
      { text1: "Served with:", text2: "", type: "desc" },
      {
        text1: "Chicken stew with vegetables & Vegetable stew",
        text2: "Desi ghee, gunpowder",
        type: "dish"
      }
    ]
  },
  { _id: "7", name: "Appams Veg", type: "file", parentId: "5", contents: [] }
];

export default class Test1 extends Component {
  state = {
    parentId: "0",
    menus: menus,
    open: false,
    type: "",
    name: ""
  };

  itemClick = _id => {
    this.setState({ parentId: _id });
  };

  addFolderFile = type => {
    let newMenus = [...this.state.menus];
    const newObj = {
      _id: uuidv1(),
      name: this.state.name,
      type: type,
      parentId: this.state.parentId
    };
    newMenus.push(newObj);
    this.setState({ menus: newMenus, open: false });
  };

  handleOpen = type => {
    this.setState({ open: true, type });
  };

  handleClose = () => {
    this.setState({ open: false });
  };

  handleChange = e => {
    this.setState({ [e.target.id]: e.target.value });
  };

  render() {
    const { parentId, menus } = this.state;

    return (
      <Fragment>
        <Grid
          container
          direction="row"
          justify="flex-start"
          alignItems="center"
        >
          <Grid item xs={9}>
            <Grid
              container
              direction="row"
              justify="flex-start"
              alignItems="center"
            >
              <BreadCrump
                menus={menus}
                _id={parentId}
                onClick={this.itemClick}
              />
            </Grid>
          </Grid>

          <Grid item xs={3}>
            <Grid
              container
              direction="row"
              justify="flex-end"
              alignItems="center"
            >
              <Grid item>
                <Button onClick={() => this.handleOpen("folder")}>
                  <i className="fa fa-folder" style={{ color: "orange" }} />
                  &nbsp;Add&nbsp;
                </Button>
                <Button onClick={() => this.handleOpen("file")}>
                  <i className="fa fa-file" style={{ color: "red" }} />
                  &nbsp;Add&nbsp;
                </Button>
              </Grid>
            </Grid>
          </Grid>
        </Grid>

        <Grid
          container
          direction="row"
          justify="flex-start"
          alignItems="center"
        >
          {menus.filter(ele => ele.parentId === parentId).map(item => (
            <Grid item xs={12}>
              <p key={item._id}>
                {item.type === "folder" ? (
                  <i className="fa fa-folder" style={{ color: "orange" }} />
                ) : (
                  <i className="fa fa-file" style={{ color: "red" }} />
                )}
                <span
                  style={{ paddingLeft: "15px", cursor: "pointer" }}
                  onClick={() => this.itemClick(item._id)}
                >
                  {item.name}
                </span>
                <Divider />
              </p>
            </Grid>
          ))}
        </Grid>

        <Dialog
          open={this.state.open}
          onClose={this.handleClose}
          aria-labelledby="form-dialog-title"
        >
          <DialogTitle id="form-dialog-title">
            {this.state.type} name
          </DialogTitle>
          <DialogContent>
            <DialogContentText>
              Enter name of the new {this.state.type}
            </DialogContentText>
            <TextField
              autoFocus
              margin="dense"
              id="name"
              label={this.state.type}
              type="text"
              fullWidth
              onChange={this.handleChange}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={this.handleClose} color="primary">
              Cancel
            </Button>
            <Button
              onClick={() => this.addFolderFile(this.state.type)}
              color="primary"
            >
              Create
            </Button>
          </DialogActions>
        </Dialog>
      </Fragment>
    );
  }
}
